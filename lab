from flask import Flask, jsonify, request
from flask_sqlalchemy import SQLAlchemy
from flask_jwt_extended import JWTManager, jwt_required, create_access_token, create_refresh_token, get_jwt_identity

app = Flask(__name__)

app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///library.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['JWT_SECRET_KEY'] = 'your_jwt_secret_key'  # Секретний ключ для шифрування JWT токенів
db = SQLAlchemy(app)

jwt = JWTManager(app)

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(100), unique=True, nullable=False)
    password = db.Column(db.String(100), nullable=False)

    def __repr__(self):
        return f'<User {self.username}>'


class Book(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(200), nullable=False)
    published_year = db.Column(db.Integer, nullable=False)
    author_id = db.Column(db.Integer, nullable=False)
    publisher_id = db.Column(db.Integer, nullable=False)

with app.app_context():
    db.create_all()

@app.route('/register', methods=['POST'])
def register():
    data = request.get_json()

    if not data or not data.get('username') or not data.get('password'):
        return jsonify({"message": "Missing username or password"}), 400

    new_user = User(username=data['username'], password=data['password'])
    db.session.add(new_user)
    db.session.commit()

    return jsonify({"message": "User registered successfully!"}), 201

@app.route('/login', methods=['POST'])
def login():
    data = request.get_json()

    if not data or not data.get('username') or not data.get('password'):
        return jsonify({"message": "Missing username or password"}), 400

    user = User.query.filter_by(username=data['username']).first()

    if user and user.password == data['password']:  # Тут слід використовувати хешування пароля
        access_token = create_access_token(identity=user.id)
        refresh_token = create_refresh_token(identity=user.id)
        return jsonify(access_token=access_token, refresh_token=refresh_token), 200
    else:
        return jsonify({"message": "Invalid username or password"}), 401


@app.route('/logout', methods=['POST'])
@jwt_required()
def logout():
    return jsonify({"message": "Successfully logged out!"}), 200

@app.route('/refresh', methods=['POST'])
@jwt_required(fresh=True)
def refresh():
    current_user_id = get_jwt_identity()  # Отримуємо ID користувача з токену
    new_access_token = create_access_token(identity=current_user_id)
    return jsonify(access_token=new_access_token), 200

@app.route('/create_book', methods=['POST'])
def create_book():
    data = request.get_json()

    title = data.get('title')
    author = data.get('author')
    subject = data.get('subject')
    year = data.get('year')

    if not isinstance(subject, str):
        return jsonify({"msg": "Subject must be a string"}), 422

    if not isinstance(title, str) or not isinstance(author, str) or not isinstance(year, int):
        return jsonify({"msg": "Invalid data types"}), 422

    return jsonify({"msg": "Book created successfully"}), 201


@app.route('/update_book/<int:book_id>', methods=['PUT'])
def update_book(book_id):

    book = Book.query.get_or_404(book_id)

    data = request.get_json()


    try:
        book_data = BookSchema().load(data)  # Перевіряємо, чи правильні дані
    except ValidationError as err:
        return jsonify(err.messages), 422

    book.title = book_data['title']
    book.author = book_data['author']
    book.subject = book_data['subject']
    book.year = book_data['year']

    db.session.commit()

    return jsonify({"msg": "Book updated successfully", "book": BookSchema().dump(book)}), 200

if name == '__main__':
    app.run(debug=True)
